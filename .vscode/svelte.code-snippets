{
	"Create Component": {
		"prefiex": "Create component",
		"body": [
			"<script lang=\"ts\">",
			"\timport { type Snippet } from 'svelte';",
			"\timport { type Attachment } from 'svelte/attachments';",
			"\timport { twMerge } from 'tailwind-merge';",
			"\timport { attachmentFactory } from '\\$lib/attachments';",
			"\timport { theme as themeStore } from '\\$lib/theme';",
			"",
			"\ttype Props = { attachments?: Attachment[]; children?: Snippet; class?: string, style?: string; variants?: string[] };",
			"\tlet { attachments = \\$bindable([]), children, class: className, style, variants = [], ...restProps }: Props = \\$props();",
			"</script>",
			"",
			"<$1 {...restProps} {@attach attachmentFactory(attachments)} class={twMerge(\\$themeStore.$2.default, ...variants.map((variant: string) => \\$themeStore.$2[variant]), className)} {style}>",
			"\t{#if children}",
			"\t\t{@render children()}",
			"\t{/if}",
			"</$1>"
		],
		"description": "Boilerplate for creating a component"
	},
	"Fix Component Class": {
		"prefix": "Fix component class",
		"body": [
			"class={twMerge(",
			"\t\\$themeStore.$1.default,",
			"\t...variants.map((variant: string) => \\$themeStore.$1[variant]),",
			"\tclassName",
			")}"
		]
	}
}
