// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model QuoteMarginQuote {
  id                      String   @id @default(auto()) @map("_id") @db.ObjectId
  customerType            String   @default("direct")
  laborAmount             Float?
  previousLaborAmount     Float?
  previousMarginAmount    Float?
  previousMaterialAmount  Float?
  previousQuoteDate       DateTime
  previousQuoteNumber     Int
  previousSellPrice       Float
  previousTotalCostAmount Float?
  marginAmount            Float?
  materialAmount          Float?
  productType             String   @default("TG")
  quoteDate               DateTime
  quoteNumber             Int      @unique
  totalCostAmount         Float?
  type                    String
  sellPrice               Float
}

model Role {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  label    String
  routes   Route[]  @relation(fields: [routeIds], references: [id])
  routeIds String[] @db.ObjectId
  users    User[]   @relation(fields: [userIds], references: [id])
  userIds  String[] @db.ObjectId
}

model Route {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  href    String
  group   String
  label   String
  roles   Role[]   @relation(fields: [roleIds], references: [id])
  roleIds String[] @db.ObjectId
}

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  isActive     Boolean      @default(false)
  passwordHash String
  profile      UserProfile?
  roles        Role[]       @relation(fields: [roleIds], references: [id])
  roleIds      String[]     @db.ObjectId
  username     String       @unique
}

model UserProfile {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  dateOfHire          DateTime
  employeeNumber      Int
  emailSignatureTitle String        @default("")
  extension           Int           @default(0)
  firstName           String
  lastName            String
  subordinates        UserProfile[] @relation(name: "UserProfileToUserProfile")
  subordinateIds      String[]      @db.ObjectId
  supervisor          UserProfile?  @relation(fields: [supervisorId], name: "UserProfileToUserProfile", references: [id], onDelete: NoAction, onUpdate: NoAction)
  supervisorId        String?       @db.ObjectId
  user                User          @relation(fields: [userId], references: [id])
  userId              String        @unique @db.ObjectId
}
