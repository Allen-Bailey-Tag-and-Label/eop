// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model JobTitle {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  costCenter          Int
  code                Int
  eeoClassification   Int
  payChangeRequestIds String[]           @db.ObjectId
  payChangeRequests   PayChangeRequest[]
  title               String
  workCompClass       Int
  userIds             String[]           @db.ObjectId
  users               User[]
}

model PayChangeRequest {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  lastAfter       Float
  lastDate        String
  lastDescription String
  lastExempt      Boolean
  lastExplanation String
  lastPrevious    Float
  lastPercent     Float
  newAfter        Float
  newDate         String
  newDescription  String
  newExempt       Boolean
  newExplanation  String
  newPrevious     Float
  newPercent      Float
  status          String
  jobTitleId      String   @db.ObjectId
  jobTitle        JobTitle @relation(fields: [jobTitleId], references: [id])
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
}

model Role {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  routeIds String[] @db.ObjectId
  routes   Route[]  @relation(fields: [routeIds], references: [id])
  userIds  String[] @db.ObjectId
  users    User[]   @relation(fields: [userIds], references: [id])
}

model Route {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  group   String
  href    String
  label   String
  roleIds String[] @db.ObjectId
  roles   Role[]   @relation(fields: [roleIds], references: [id])
}

model User {
  id                  String             @id @default(auto()) @map("_id") @db.ObjectId
  isActive            Boolean
  jobTitleId          String?            @db.ObjectId
  jobTitle            JobTitle?          @relation(fields: [jobTitleId], references: [id])
  lastLogin           DateTime
  passwordHash        String?
  payChangeRequestIds String[]           @db.ObjectId
  payChangeRequests   PayChangeRequest[]
  profile             UserProfile        @relation(fields: [profileId], references: [id])
  profileId           String             @unique @db.ObjectId
  roleIds             String[]           @db.ObjectId
  roles               Role[]             @relation(fields: [roleIds], references: [id])
  username            String             @unique
}

model UserProfile {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  dateOfHire String
  ennisId    Int
  email      String?
  firstName  String
  lastName   String
  user       User?
}
