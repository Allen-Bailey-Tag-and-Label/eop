// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model AESFeature {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  description        String
  isPrintable        Boolean
  itemProductFeature AESItemProductFeature?
  key                String
  seq                Int
  type               String
}

model AESItemProductFeature {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  isActive  Boolean
  featureID String     @unique @db.ObjectId
  feature   AESFeature @relation(fields: [featureID], references: [id])
}

model AESWorkCenter {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  description   String
  fixedOH       Float
  machSetupRate Float
  machRunRate   Float
  number        Int
  setupLabor    Float
  runLabor      Float
  variableOH    Float
}

model FirePricing {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  options  Json
  price    Float
  quantity Int
  type     String
}

model Order {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  orderOriginator     String
  order               Int
  lineNumber          Int
  woNumber            Int
  orderType           String
  product             String
  productDescription  String
  holdCode            String
  accountNumber       Int
  customerName        String
  customerPO          String
  quantity            Int
  quantityInInventory Int
  um                  String
  unitPrice           Float
  lineType            String
  pricingUm           String
  extendedPrice       Float
  orderDate           DateTime
  proofDate           DateTime
  originalDate        DateTime
  rescheduleDate      DateTime
  actualShipDate      DateTime
  pressNumber         String
  statusCode          String
  statusDescription   String
  dateMoved           DateTime
  orderAndLineNumber  String   @unique
}

model Role {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  label    String   @unique
  routeIds String[] @db.ObjectId
  routes   Route[]  @relation(fields: [routeIds], references: [id])
  userIds  String[] @db.ObjectId
  users    User[]   @relation(fields: [userIds], references: [id])
}

model Route {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  group   String?
  href    String
  label   String
  roleIds String[] @db.ObjectId
  roles   Role[]   @relation(fields: [roleIds], references: [id])
}

model Setting {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  key      String
  boolean  Boolean?
  dateTime DateTime?
  float    Float?
  int      Int?
  json     Json?
  string   String?
}

model LaborEntry {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  date           DateTime
  ennisId        Int
  entries        Json
  dateAndEnnisId String   @unique
}

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  isActive     Boolean      @default(false)
  isOnboarded  Boolean      @default(false)
  passwordHash String
  profile      UserProfile?
  roleIds      String[]     @db.ObjectId
  roles        Role[]       @relation(fields: [roleIds], references: [id])
  username     String       @unique
}

model UserProfile {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  dateHired           DateTime
  ennisId             Int
  email               String   @default("")
  emailSignatureTitle String
  extension           Int
  firstName           String
  lastName            String
  userId              String   @unique @db.ObjectId
  user                User     @relation(fields: [userId], references: [id])
}

model WorkOrderRouting {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  sequence             Int
  workCenter           Int
  description          String
  operationStatus      Int
  dateRequested        DateTime
  quantity             Int
  standardHours        Float
  actualHours          Float
  remainingHours       Float
  dateEntered          DateTime
  workOrder            Int
  salesOrder           Int
  itemNumber           String
  workOrderStatus      Int
  productDescription   String
  accountNumber        Int
  customerName         String
  dateMoved            DateTime
  currentLocation      String
  workOrderAndSequence String   @unique
}
